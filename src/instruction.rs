use alloc::vec::Vec;

use crate::types::{BlockType, LabelIndex, FuncIndex, TypeIndex, TableIndex, RefType, ValueType, LocalIndex, GlobalIndex, ElemIndex, DataIndex};
pub enum Instruction {
    Unreachable,
    Nop,
    Block(BlockType, Vec<Instruction>),
    Loop(BlockType, Vec<Instruction>),
    If(BlockType, Vec<Instruction>),
    IfElse(BlockType, Vec<Instruction>, Vec<Instruction>),
    Branch(LabelIndex),
    BranchIf(LabelIndex),
    BranchTable(Vec<LabelIndex>, LabelIndex),
    Return,
    Call(FuncIndex),
    CallIndirect(TypeIndex, TableIndex),
    RefNull(RefType),
    RefIsNull,
    RefFunc(FuncIndex),
    Drop,
    Select,
    SelectTyped(Vec<ValueType>),
    LocalGet(LocalIndex),
    LocalSet(LocalIndex),
    LocalTee(LocalIndex),
    GlobalGet(GlobalIndex),
    GlobalSet(GlobalIndex),
    TableGet(TableIndex),
    TableSet(TableIndex),
    TableInit(ElemIndex, TableIndex),
    ElemDrop(ElemIndex),
    TableCopy(TableIndex,TableIndex),
    TableGrow(TableIndex),
    TableSize(TableIndex),
    TableFill(TableIndex),
    I32Load(u32, u32),
    I64Load(u32, u32),
    F32Load(u32, u32),
    F64Load(u32, u32),
    I32Load8S(u32, u32),
    I32Load8U(u32, u32),
    I32Load16S(u32, u32),
    I32Load16U(u32, u32),
    I64Load8S(u32, u32),
    I64Load8U(u32, u32),
    I64Load16S(u32, u32),
    I64Load16U(u32, u32),
    I64Load32S(u32, u32),
    I64Load32U(u32, u32),
    I32Store(u32, u32),
    I64Store(u32, u32),
    F32Store(u32, u32),
    F64Store(u32, u32),
    I32Store8(u32, u32),
    I32Store16(u32, u32),
    I64Store8(u32, u32),
    I64Store16(u32, u32),
    I64Store32(u32, u32),
    MemorySize,
    MemoryGrow,
    MemoryInit(DataIndex),
    DataDrop(DataIndex),
    MemoryCopy,
    MemoryFill,
    I32Const(u32),
    I64Const(u64),
    F32Const(f32),
    F64Const(f64),
    I32EqualZero,
    I32Equal,
    I32NotEqual,
    I32LessThanS,
    I32LessThanU,
    I32GreaterThanS,
    I32GreaterThanU,
    I32LessEqualS,
    I32GreaterEqualS,
    I32GreaterEqualU,
    I64EqualZero,
    I64Equal,
    I64NotEqual,
    I64LessThanS,
    I64LessThanU,
    I64GreaterThanS,
    I64GreaterThanU,
    I64LessEqualS,
    I64GreaterEqualS,
    I64GreaterEqualU,
    F32Equal,
    F32NotEqual,
    F32LessThan,
    F32GreaterThan,
    F32LessEqual,
    F32GreaterEqual,
    F64Equal,
    F64NotEqual,
    F64LessThan,
    F64GreaterThan,
    F64LessEqual,
    F64GreaterEqual,
    I32Clz,
    I32Ctz,
    I32Popcount,
    I32Add,
    I32Subtract,
    I32Multiply,
    I32DivideS,
    I32DivideU,
    I32RemainderS,
    I32RemainderU,
    I32And,
    I32Or,
    I32Xor,
    I32ShiftLeft,
    I32ShiftRightS,
    I32ShiftRightU,
    I32RotateLeft,
    I32RotateRight,
    I64Clz,
    I64Ctz,
    I64Popcount,
    I64Add,
    I64Subtract,
    I64Multiply,
    I64DivideS,
    I64DivideU,
    I64RemainderS,
    I64RemainderU,
    I64And,
    I64Or,
    I64Xor,
    I64ShiftLeft,
    I64ShiftRightS,
    I64ShiftRightU,
    I64RotateLeft,
    I64RotateRight,
    F32Absolute,
    F32Negate,
    F32Ceiling,
    F32Floor,
    F32Truncate,
    F32Nearest,
    F32SquareRoot,
    F32Add,
    F32Subtract,
    F32Multiply,
    F32Divide,
    F32Minimum,
    F32Maximum,
    F32CopySign,
    F64Absolute,
    F64Negate,
    F64Ceiling,
    F64Floor,
    F64Truncate,
    F64Nearest,
    F64SquareRoot,
    F64Add,
    F64Subtract,
    F64Multiply,
    F64Divide,
    F64Minimum,
    F64Maximum,
    F64CopySign,
    I32WrapI64,
    I32TruncateF32S,
    I32TruncateF32U,
    I32TruncateF64S,
    I32TruncateF64U,
    I64ExtendI32S,
    I64ExtendI32U,
    I64TruncateF32S,
    I64TruncateF32U,
    I64TruncateF64S,
    I64TruncateF64U,
    F32ConvertI32S,
    F32ConvertI32U,
    F32ConvertI64S,
    F32ConvertI64U,
    F32DemoteF64,
    F64ConvertI32S,
    F64ConvertI32U,
    F64ConvertI64S,
    F64ConvertI64U,
    F64PromoteF32,
    I32ReinterpretF32,
    I64ReinterpretF64,
    F32ReinterpretI32,
    F64ReinterpretI64,
    I32Extend8S,
    I32Extend16S,
    I64Extend8S,
    I64Extend16S,
    I64Extend32S,
    UndefinedInstruction,
    UnimplementedInstruction,
}